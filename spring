//service

package com.example.demo.service;


import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.catalina.User;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.demo.dto.StudentDto;
import com.example.demo.model.Student;
import com.example.demo.model.UserDetails;
//import com.example.demo.repository.StudentRepo;
import com.example.demo.repository.StudentRepository;
import com.example.demo.repository.UserDetailRepo;
import com.example.demo.utility.UtilityClass;

@Service
public class StudentService {

//	@Autowired
//	private StudentRepo studentRepo;
	
	@Autowired
	private StudentRepository str;
	
	@Autowired
	private UserDetailRepo userRepo;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@Autowired
	public EmailService emailService;
 
	
	public StudentDto create(StudentDto stu) {
		if(!UtilityClass.numbervalidate(stu.getNumber())) {
			throw new IllegalArgumentException ("Invalid Mobile Number!");
		}
		Student student = modelMapper.map(stu, Student.class);
		Student saveStu = str.save(student);
		return modelMapper.map(saveStu, StudentDto.class);
	}
	
	public List<StudentDto> getAll(){
		Student stu = (Student) str.findAll();
		return (List<StudentDto>) modelMapper.map(stu, StudentDto.class);
	}

	public List<Student> getAll1(){
		return str.findAll();
	}
	
	public StudentDto getEmpById(Integer id) {
		Student stu = str.findById(id).orElseThrow(() -> new RuntimeException("Employee not found"));
		return modelMapper.map(stu, StudentDto.class);
	}
	
	public Student updateStudent(StudentDto studentDto, Integer id) {
		Student emp = str.findById(id).orElseThrow (() -> new RuntimeException ("Employee not found"));
		emp.setName(studentDto.getName());
		emp.setNumber(studentDto.getNumber());
		emp.setEmail(studentDto.getEmail());
//		emp.setPassword(studentDto.getPassword());
//		emp.setCountry(studentDto.getCountry());
		emp.setDepartment(studentDto.getDepartment());
		emp.setSalary(studentDto.getSalary());
		return str.save(emp);
	}
	
	public void deleteStu(Integer id) {
		if(!str.existsById(id)) {
			throw new RuntimeException("Employee" + id + "not found" );
		}
		str.deleteById(id);
	}  
	
	
	
	// Register user
    public String registerUser(UserDetails user) {
        if (userRepo.findByUsername(user.getUserName()) != null) {
            return "Username already exists!";
        }
//        user.setUserName(user.getUserName());
//        user.setPassword(user.getPassword());
//        user.setEmail(user.getEmail());
        emailService.sendWelcomeEmail(user.getEmail(), user.getPassword());
        userRepo.save(user);
        return "User registered successfully!";
    }
    

    // Login user
    public String loginUser(String username, String password) {
        UserDetails user = userRepo.findByUsername(username);
        if (user == null || !user.getPassword().equals(password)) {
            return "Invalid credentials!";
        }
        return "Login successful!";
    }
}
	

//controller

package com.example.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.dto.StudentDto;
import com.example.demo.model.Student;
import com.example.demo.model.UserDetails;
import com.example.demo.repository.StudentRepository;
import com.example.demo.service.EmailService;
import com.example.demo.service.StudentService;

@RestController
@RequestMapping("/student")
@CrossOrigin(origins = "http://localhost:5173/")
public class StudentController {

	@Autowired
	public StudentService studentService;
	

		
	@PostMapping("/save")
	public StudentDto create(@RequestBody StudentDto stu) {
		return studentService.create(stu);
	}
	
	@GetMapping("/get/{id}")
	public StudentDto getById(@PathVariable Integer id) {
		return studentService.getEmpById(id);
	}
	
	@GetMapping("/getAll")
	public List<StudentDto> getAll(){
		return studentService.getAll();
	}
	
	@GetMapping("/getAll1")
	public List<Student> getAll1(){
		return studentService.getAll1();
	}
	
	@PutMapping("/update/{id}")
	public Student updateStudent(@RequestBody StudentDto studentDto, @PathVariable Integer id) {
		return studentService.updateStudent(studentDto, id);
	}
	
	@DeleteMapping("/delete/{id}")
	public void deleteEmp(@PathVariable Integer id) {
		studentService.deleteStu(id);
	}
	
	// Register user
    @PostMapping("/user/register")
    public ResponseEntity<String> register(@RequestBody UserDetails user) {
        //return studentService.registerUser(user);
    	return ResponseEntity.ok("User Register Successfully");	
    }

    // Login user
    @PostMapping("/user/login")
    public String login(@RequestParam String username, @RequestParam String password) {
        return studentService.loginUser(username, password);
    }
}


//model

package com.example.demo.model;

import java.util.List;

import org.antlr.v4.runtime.misc.NotNull;
import org.hibernate.annotations.processing.Pattern;

import com.example.demo.utility.UtilityClass;
import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.PostLoad;
import jakarta.persistence.Transient;

@Entity
public class Student {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;
	
	private String userName;
	private String number;
	//private String password;
	private String email;
	//private String country;
	private String department;
	private Integer Salary;
	
	@Transient
	private String maskNumber;
	
	@Transient
	private String maskPassword;
	
	@Transient
	private String maskEmail;
	
	
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getuserName() {
		return userName;
	}
	public void setName(String userName) {
		this.userName = userName;
	}
	public String getNumber() {
		return number;
	}
	public void setNumber(String number) {
		this.number = number;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	
//	public String getPassword() {
//		return password;
//	}
//	public void setPassword(String password) {
//		this.password = password;
//	}
	
//	
//	public String getCountry() {
//		return country;
//	}
//	public void setCountry(String country) {
//		this.country = country;
//	}

	public String getDepartment() {
		return department;
	}
	public void setDepartment(String department) {
		this.department = department;
	}
	public Integer getSalary() {
		return Salary;
	}
	public void setSalary(Integer salary) {
		Salary = salary;
	}
	
	
	public String getMaskNumber() {
		return maskNumber;
	}
	public void setMaskNumber(String maskNumber) {
		this.maskNumber = maskNumber;
	}
	public String getMaskPassword() {
		return maskPassword;
	}
	public void setMaskPassword(String maskPassword) {
		this.maskPassword = maskPassword;
	}
	public String getMaskEmail() {
		return maskEmail;
	}
	public void setMaskEmail(String maskEmail) {
		this.maskEmail = maskEmail;
	}
	public Student(Integer id, String userName, 
			String email, String number,
			String department, Integer salary, String maskPassword
			, String maskEmail, String maskNumber) {
		super();
		this.id = id;
		this.userName = userName;
		this.number = number;
		//this.password = password;
		this.email = email;
		//this.country = country;
		this.department = department;
		this.Salary = salary;
		this.maskNumber = maskNumber;
		this.maskPassword = maskPassword;
		this.maskEmail = maskEmail;
		//this.order = order;
	}
	
	
	public Student() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	
//	@PostLoad
//	private void maskFiled() {
//		if("India".equalsIgnoreCase(this.country)) {
//		this.maskNumber = UtilityClass.masking(this.number,"number");
//		this.maskPassword = UtilityClass.masking(this.password, "password");
//		this.maskEmail = UtilityClass.masking(this.email, "email");
//	}
//		else {
//			this.maskNumber = this.number;
//			this.maskPassword = this.password;
//			this.maskEmail = this.email;
//		}
//	}
}
	

//user
package com.example.demo.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class UserDetails {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;
	
	private String username;
	private String password;
	private String email;
	
	public String getUserName() {
		return username;
	}
	public void setUserName(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
}

//dto

package com.example.demo.dto;

public class StudentDto {
	
	private Integer id;
	private String name;
	private String number;
	//private String password;
	private String email;
	private String department;
	private Integer salary;
	//private String country;
	
	
	public StudentDto(Integer id, String name, String number,
			 String email, String department, Integer salary) {
		super();
		this.id = id;
		this.name = name;
		//this.password = password;
		this.email = email;
		this.department = department;
		this.salary = salary;
		//this.country = country;
	}
		
	public StudentDto() {
		super();
		// TODO Auto-generated constructor stub
	}


	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getNumber() {
		return number;
	}
	public void setNumber(String number) {
		this.number = number;
	}
//	public String getPassword() {
//		return password;
//	}
//	public void setPassword(String password) {
//		this.password = password;
//	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}

	public String getDepartment() {
		return department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	public Integer getSalary() {
		return salary;
	}

	public void setSalary(Integer salary) {
		this.salary = salary;
	}

//	public String getCountry() {
//		return country;
//	}
//
//	public void setCountry(String country) {
//		this.country = country;
//	}
//	
	
}


//repo user

@Repository
public interface UserDetailRepo extends JpaRepository<UserDetails, Integer> {

	UserDetails findByUsername(String username);
}
